// Generated by CoffeeScript 2.5.1
(function() {
  var ApiMate, Application, getHashParams, inputValue, isFilled, makeSearchRegexp, pad, parseQueryString, postErrorTemplate, postSuccessTemplate, preUploadUrl, resultsTemplate, setInputValue;

  $(function() {
    return Application.bindTooltips();
  });

  window.Application = Application = class Application {
    static bindTooltips() {
      var defaultOptions;
      defaultOptions = {
        container: 'body',
        placement: 'top',
        template: '<div class="tooltip results-tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
      };
      return $('.tooltipped').tooltip(defaultOptions);
    }

  };

  // Mustache.js templates that are used as default by ApiMate if they
  // are not set by the user.

  // Content shown in the middle of the page with the list of links generated
  resultsTemplate = "<div class='api-mate-results'> <div class='api-mate-links'> {{#urls}} <div class='api-mate-link-wrapper'> <div class='api-mate-link {{urlClass}}'> <a class='label' href='{{url}}' target='_blank'>GET</a> <a href='#' data-url='{{url}}' class='tooltipped label' title='Send \"{{name}}\" using a POST request' data-api-mate-post='{{name}}'>POST</a> <span class='api-mate-method-name'>{{description}}</span> <a href='{{url}}' target='_blank'>{{url}}</a> </div> </div> {{/urls}} </div> <div class='api-mate-result-title'> <h5 class='label-title'>Results {{title}}:</h5> </div> </div>";

  // Content of the dialog when a POST request succeeds
  postSuccessTemplate = "<pre>{{response}}</pre>";

  // Content of the dialog when a POST request fails
  postErrorTemplate = "<p>Server responded with status: <code>{{status}}: {{statusText}}</code>.</p> {{#response}} <p>Content:</p> <pre>{{response}}</pre> {{/response}} {{^response}} <p>Content: <code>-- no content --</code></p> {{/response}} <p>If you don't know the reason for this error, check these possibilities:</p> <ul> <li> Your server does not allow <strong>cross-domain requests</strong>. By default BigBlueButton and Mconf-Live <strong>do not</strong> allow cross-domain requests, so you have to enable it to test this request via POST. Check our <a href=\"https://github.com/mconf/api-mate/tree/master#allow-cross-domain-requests\">README</a> for instructions on how to do it. </li> <li> This API method cannot be accessed via POST. </li> <li> Your server is down or malfunctioning. Log into it and check if everything is OK with <code>bbb-conf --check</code>. </li> <ul>";

  // Body of a POST request to use pre-upload of slides.
  preUploadUrl = "<?xml version='1.0' encoding='UTF-8'?> <modules> <module name='presentation'> {{#urls}} <document url='{{url}}' /> {{/urls}} </module> </modules>";

  $(function() {
    var apiMate, placeholders;
    placeholders = {
      results: '#api-mate-results',
      modal: '#post-response-modal'
    };
    apiMate = new ApiMate(placeholders);
    apiMate.start();
    return $('#api-mate-results').on('api-mate-urls-added', function() {
      return Application.bindTooltips();
    });
  });

  // A class that does all the logic of the API Mate. It's integrated with the html markup
  // via data attributes and a few classes. Can be used with other applications than the
  // API Mate to provide similar functionality.

  // Depends on:
  // * jQuery
  // * underscore/lodash
  // * mustache
  // * bigbluebutton-api-js
  // * bootstrap (for the modal, especially)

  window.ApiMate = ApiMate = class ApiMate {
    // `placeholders` should be an object with the properties:
    // * `results`: a string with the jQuery selector for the element that will contain
    //   the URLs generated.
    // * `modal`: a string with the jQuery selector for an element that will be used as
    //   a modal window (should follow bootstrap's model for modals).

    // `templates` should be an object with the properties:
    // * `results`: a string with a mustache template to show the list of links generated.
    // * `postSuccess`: a string with a mustache template with the internal content of the
    //   modal when showing a success message for a POST request.
    // * `postError`: a string with a mustache template with the internal content of the
    //   modal when showing an error message for a POST request.
    // * `preUpload`: a string with a mustache template to format the body of a the POST
    //   request to pre-upload files when creating a conference.
    constructor(placeholders1, templates) {
      var base, base1, base2, base3;
      this.placeholders = placeholders1;
      this.templates = templates;
      this.updatedTimer = null;
      this.urls = []; // last set of urls generated
      if (this.placeholders == null) {
        this.placeholders = {};
      }
      if (this.templates == null) {
        this.templates = {};
      }
      if ((base = this.templates)['results'] == null) {
        base['results'] = resultsTemplate;
      }
      if ((base1 = this.templates)['postSuccess'] == null) {
        base1['postSuccess'] = postSuccessTemplate;
      }
      if ((base2 = this.templates)['postError'] == null) {
        base2['postError'] = postErrorTemplate;
      }
      if ((base3 = this.templates)['preUpload'] == null) {
        base3['preUpload'] = preUploadUrl;
      }
      this.debug = false;
      this.urlsLast = null;
    }

    start() {
      // set random values in some inputs
      this.initializeMenu();
      // when the meeting name is changed, change the id also
      $("[data-api-mate-param*='meetingID']").on("keyup", function() {
        return $("[data-api-mate-param*='name']").val($(this).val());
      });
      // triggers to generate the links
      $("[data-api-mate-param]").on("change keyup", (e) => {
        this.generateUrls();
        return this.addUrlsToPage(this.urls);
      });
      $("[data-api-mate-server]").on("change keyup", (e) => {
        this.generateUrls();
        return this.addUrlsToPage(this.urls);
      });
      $("[data-api-mate-special-param]").on("change keyup", (e) => {
        this.generateUrls();
        return this.addUrlsToPage(this.urls);
      });
      $("[data-api-mate-sha]").on("click", (e) => {
        $("[data-api-mate-sha]").removeClass('active');
        $(e.target).addClass('active');
        this.generateUrls();
        return this.addUrlsToPage(this.urls);
      });
      // expand or collapse links
      $("[data-api-mate-expand]").on("click", () => {
        var selected;
        selected = !$("[data-api-mate-expand]").hasClass("active");
        this.expandLinks(selected);
        return true;
      });
      // button to clear the inputs
      $("[data-api-mate-clear]").on("click", (e) => {
        this.clearAllFields();
        this.generateUrls();
        return this.addUrlsToPage(this.urls);
      });
      // button to re-randomize menu
      $("[data-api-mate-randomize]").on("click", (e) => {
        this.initializeMenu();
        this.generateUrls();
        return this.addUrlsToPage(this.urls);
      });
      // set our debug flag
      $("[data-api-mate-debug]").on("click", () => {
        var selected;
        selected = !$("[data-api-mate-debug]").hasClass("active");
        this.debug = selected;
        return true;
      });
      // generate the links already on setup
      this.generateUrls();
      this.addUrlsToPage(this.urls);
      // binding elements
      this.bindPostRequests();
      // search
      return this.bindSearch();
    }

    initializeMenu() {
      var name, user, vbridge;
      vbridge = "7" + pad(Math.floor(Math.random() * 10000 - 1).toString(), 4);
      $("[data-api-mate-param*='voiceBridge']").val(vbridge);
      name = "random-" + Math.floor(Math.random() * 10000000).toString();
      $("[data-api-mate-param*='name']").val(name);
      $("[data-api-mate-param*='meetingID']").val(name);
      $("[data-api-mate-param*='recordID']").val(name);
      user = "User " + Math.floor(Math.random() * 10000000).toString();
      $("[data-api-mate-param*='fullName']").val(user);
      return this.setMenuValuesFromURL();
    }

    // Add a div with all links and a close button to the global
    // results container
    addUrlsToPage(urls) {
      var desc, html, isEqual, item, j, len, opts, placeholder;
      // don't do it again unless something changed
      isEqual = (urls != null) && (this.urlsLast != null) && (JSON.stringify(urls) === JSON.stringify(this.urlsLast));
      if (isEqual) {
        return;
      }
      this.urlsLast = _.map(urls, _.clone);
      placeholder = $(this.placeholders['results']);
      for (j = 0, len = urls.length; j < len; j++) {
        item = urls[j];
        desc = item.description;
        if (desc.match(/recording/i)) {
          item.urlClass = "api-mate-url-recordings";
        } else if (desc.match(/mobile/i)) {
          item.urlClass = "api-mate-url-from-mobile";
        } else if (desc.match(/custom call/i)) {
          item.urlClass = "api-mate-url-custom-call";
        } else {
          item.urlClass = "api-mate-url-standard";
        }
      }
      opts = {
        title: new Date().toTimeString(),
        urls: urls
      };
      html = Mustache.to_html(this.templates['results'], opts);
      $('.results-tooltip').remove();
      $(placeholder).html(html);
      this.expandLinks($("[data-api-mate-expand]").hasClass("active"));
      // mark the items as updated
      $('.api-mate-results', this.placeholders['results']).addClass("updated");
      clearTimeout(this.updatedTimer);
      this.updatedTimer = setTimeout(() => {
        return $('.api-mate-results', this.placeholders['results']).removeClass("updated");
      }, 300);
      return $(this.placeholders['results']).trigger('api-mate-urls-added');
    }

    // Returns a BigBlueButtonApi configured with the server set by the user in the inputs.
    getApi() {
      var opts, server;
      server = {};
      server.url = $("[data-api-mate-server='url']").val();
      server.salt = $("[data-api-mate-server='salt']").val();
      // Do some cleanups on the server URL to that pasted URLs in various formats work better
      // Remove trailing /, and add /api on the end if missing.
      server.url = server.url.replace(/(\/api)?\/?$/, '/api');
      server.name = server.url;
      opts = {};
      if ($("[data-api-mate-sha='sha256']").hasClass("active")) {
        opts.shaType = 'sha256';
      } else {
        opts.shaType = 'sha1';
      }
      return new BigBlueButtonApi(server.url, server.salt, this.debug, opts);
    }

    // Generate urls for all API calls and store them internally in `@urls`.
    generateUrls() {
      var _elem, api, customCalls, customParams, j, k, len, len1, len2, len3, line, lines, m, n, name, paramName, paramValue, params, ref, separator;
      params = {};
      customParams = {};
      $('[data-api-mate-param]').each(function() {
        var $elem, attr, attrs, j, len, value;
        $elem = $(this);
        attrs = $elem.attr('data-api-mate-param').split(',');
        value = inputValue($elem);
        if ((attrs != null) && (value != null)) {
          for (j = 0, len = attrs.length; j < len; j++) {
            attr = attrs[j];
            params[attr] = value;
          }
        }
        return true; // don't ever stop
      });
      lines = inputValue("textarea[data-api-mate-special-param='meta']");
      if (lines != null) {
        lines = lines.replace(/\r\n/g, "\n").split("\n");
        for (j = 0, len = lines.length; j < len; j++) {
          line = lines[j];
          separator = line.indexOf("=");
          if (separator >= 0) {
            paramName = line.substring(0, separator);
            paramValue = line.substring(separator + 1, line.length);
            params["meta_" + paramName] = paramValue;
          }
        }
      }
      lines = inputValue("textarea[data-api-mate-special-param='custom-params']");
      if (lines != null) {
        lines = lines.replace(/\r\n/g, "\n").split("\n");
        for (k = 0, len1 = lines.length; k < len1; k++) {
          line = lines[k];
          separator = line.indexOf("=");
          if (separator >= 0) {
            paramName = line.substring(0, separator);
            paramValue = line.substring(separator + 1, line.length);
            params["custom_" + paramName] = paramValue;
            customParams["custom_" + paramName] = paramValue;
          }
        }
      }
      lines = inputValue("textarea[data-api-mate-special-param='custom-calls']");
      if (lines != null) {
        lines = lines.replace(/\r\n/g, "\n").split("\n");
        customCalls = lines;
      } else {
        customCalls = null;
      }
      // generate the list of links
      api = this.getApi();
      this.urls = [];
      // standard API calls
      _elem = function(name, desc, url) {
        return {
          name: name,
          description: desc,
          url: url
        };
      };
      ref = api.availableApiCalls();
      for (m = 0, len2 = ref.length; m < len2; m++) {
        name = ref[m];
        if (name === 'join') {
          params['password'] = params['moderatorPW'];
          this.urls.push(_elem(name, `${name} as moderator`, api.urlFor(name, params)));
          params['password'] = params['attendeePW'];
          this.urls.push(_elem(name, `${name} as attendee`, api.urlFor(name, params)));
          // so all other calls will use the moderator password
          params['password'] = params['moderatorPW'];
        } else {
          this.urls.push(_elem(name, name, api.urlFor(name, params)));
        }
      }
      // custom API calls set by the user
      if (customCalls != null) {
        for (n = 0, len3 = customCalls.length; n < len3; n++) {
          name = customCalls[n];
          this.urls.push(_elem(name, `custom call: ${name}`, api.urlFor(name, customParams, false)));
        }
      }
      // for mobile
      params['password'] = params['moderatorPW'];
      this.urls.push(_elem("join", "mobile call: join as moderator", api.setMobileProtocol(api.urlFor("join", params))));
      params['password'] = params['attendeePW'];
      return this.urls.push(_elem("join", "mobile call: join as attendee", api.setMobileProtocol(api.urlFor("join", params))));
    }

    // Empty all inputs in the configuration menu
    clearAllFields() {
      return $("[data-api-mate-param]").each(function() {
        $(this).val("");
        return $(this).attr("checked", null);
      });
    }

    // Expand (if `selected` is true) or collapse the links.
    expandLinks(selected) {
      if (selected) {
        return $(".api-mate-link", this.placeholders['results']).addClass('expanded');
      } else {
        return $(".api-mate-link", this.placeholders['results']).removeClass('expanded');
      }
    }

    // Logic for when a button to send a request via POST is clicked.
    bindPostRequests() {
      var _apiMate;
      _apiMate = this;
      return $(document).on('click', 'a[data-api-mate-post]', function(e) {
        var $target, contentType, data, href, method;
        $target = $(this);
        href = $target.attr('data-url');
        // get the data to be posted for this method and the content type
        method = $target.attr('data-api-mate-post');
        data = _apiMate.getPostData(method);
        contentType = _apiMate.getPostContentType(method);
        $('[data-api-mate-post]').addClass('disabled');
        $.ajax({
          url: href,
          type: "POST",
          crossDomain: true,
          contentType: contentType,
          dataType: "xml",
          data: data,
          complete: function(jqxhr, status) {
            var html, modal, opts, postError, postSuccess;
            // TODO: show the result properly formatted and highlighted in the modal
            modal = _apiMate.placeholders['modal'];
            postSuccess = _apiMate.templates['postSuccess'];
            postError = _apiMate.templates['postError'];
            if (jqxhr.status === 200) {
              $('.modal-header', modal).removeClass('alert-danger');
              $('.modal-header', modal).addClass('alert-success');
              html = Mustache.to_html(postSuccess, {
                response: jqxhr.responseText
              });
              $('.modal-body', modal).html(html);
            } else {
              $('.modal-header h4', modal).text('Ooops!');
              $('.modal-header', modal).addClass('alert-danger');
              $('.modal-header', modal).removeClass('alert-success');
              opts = {
                status: jqxhr.status,
                statusText: jqxhr.statusText
              };
              if (!_.isEmpty(jqxhr.responseText)) {
                opts['response'] = jqxhr.responseText;
              }
              html = Mustache.to_html(postError, opts);
              $('.modal-body', modal).html(html);
            }
            $(modal).modal({
              show: true
            });
            return $('[data-api-mate-post]').removeClass('disabled');
          }
        });
        e.preventDefault();
        return false;
      });
    }

    getPostData(method) {
      var api, checksum, opts, query, urls;
      if (method === 'create') {
        urls = inputValue("textarea[data-api-mate-param='pre-upload']");
        if (urls != null) {
          urls = urls.replace(/\r\n/g, "\n").split("\n");
          urls = _.map(urls, function(u) {
            return {
              url: u
            };
          });
          opts = {
            urls: urls
          };
          return Mustache.to_html(this.templates['preUpload'], opts);
        }
      } else if (method === 'setConfigXML') {
        if (isFilled("textarea[data-api-mate-param='configXML']")) {
          api = this.getApi();
          query = `configXML=${api.encodeForUrl($("#input-config-xml").val())}`;
          query += `&meetingID=${api.encodeForUrl($("#input-mid").val())}`;
          checksum = api.checksum('setConfigXML', query);
          query += "&checksum=" + checksum;
          return query;
        }
      }
    }

    getPostContentType(method) {
      if (method === 'create') {
        return 'application/xml; charset=utf-8';
      } else if (method === 'setConfigXML') {
        return 'application/x-www-form-urlencoded';
      }
    }

    bindSearch() {
      var _apiMate;
      _apiMate = this;
      return $(document).on('keyup', '[data-api-mate-search-input]', function(e) {
        var $target, search, searchTerm;
        $target = $(this);
        searchTerm = inputValue($target);
        search = function() {
          var $elem, attr, attrs, j, len, ref, ref1, searchRe, visible;
          $elem = $(this);
          if ((searchTerm != null) && !_.isEmpty(searchTerm.trim())) {
            visible = false;
            searchRe = makeSearchRegexp(searchTerm);
            attrs = ((ref = $elem.attr('data-api-mate-param')) != null ? ref.split(',') : void 0) || [];
            attrs = attrs.concat(((ref1 = $elem.attr('data-api-mate-search')) != null ? ref1.split(',') : void 0) || []);
            for (j = 0, len = attrs.length; j < len; j++) {
              attr = attrs[j];
              if (attr.match(searchRe)) {
                visible = true;
              }
            }
          } else {
            visible = true;
          }
          if (visible) {
            $elem.parents('.form-group').show();
          } else {
            $elem.parents('.form-group').hide();
          }
          return true; // don't ever stop
        };
        $('[data-api-mate-param]').each(search);
        return $('[data-api-mate-special-param]').each(search);
      });
    }

    setMenuValuesFromURL() {
      var prop, query, query2, results, value;
      // set values based on parameters in the URL
      // gives priority to params in the hash (e.g. 'api_mate.html#sharedSecret=123')
      query = getHashParams();
      // but also accept params in the search string for backwards compatibility (e.g. 'api_mate.html?sharedSecret=123')
      query2 = parseQueryString(window.location.search.substring(1));
      query = _.extend(query2, query);
      if (query.server != null) {
        $("[data-api-mate-server='url']").val(query.server);
        delete query.server;
      }
      // accept several options for the secret
      if (query.salt != null) {
        $("[data-api-mate-server='salt']").val(query.salt);
        delete query.salt;
      }
      if (query.sharedSecret != null) {
        $("[data-api-mate-server='salt']").val(query.sharedSecret);
        delete query.sharedSecret;
      }
      if (query.secret != null) {
        $("[data-api-mate-server='salt']").val(query.secret);
        delete query.secret;
      }
// all other properties
      results = [];
      for (prop in query) {
        value = query[prop];
        setInputValue($(`[data-api-mate-param='${prop}']`), value);
        results.push(setInputValue($(`[data-api-mate-special-param='${prop}']`), value));
      }
      return results;
    }

  };

  // Returns the value set in an input, if any. For checkboxes, returns the value
  // as a boolean. For any other input, return as a string.
  // `selector` can be a string with a selector or a jQuery object.
  inputValue = function(selector) {
    var $elem, ref, type, value;
    $elem = $(selector);
    type = $elem.attr('type') || ((ref = $elem.prop('tagName')) != null ? ref.toLowerCase() : void 0);
    switch (type) {
      case 'checkbox':
        return $elem.is(":checked");
      default:
        value = $elem.val();
        if ((value != null) && !_.isEmpty(value.trim())) {
          return value;
        } else {
          return null;
        }
    }
  };

  // Sets `value` as the value of the input. For checkboxes checks the input if the value
  // is anything other than [null, undefined, 0].
  // `selector` can be a string with a selector or a jQuery object.
  setInputValue = function(selector, value) {
    var $elem, ref, type, val;
    $elem = $(selector);
    type = $elem.attr('type') || ((ref = $elem.prop('tagName')) != null ? ref.toLowerCase() : void 0);
    switch (type) {
      case 'checkbox':
        val = (value != null) && value !== '0' && value !== 0;
        return $elem.prop('checked', val);
      default:
        return $elem.val(value);
    }
  };

  // Check if an input text field has a valid value (not empty).
  isFilled = function(field) {
    var value;
    value = $(field).val();
    return (value != null) && !_.isEmpty(value.trim());
  };

  // Pads a number `num` with zeros up to `size` characters. Returns a string with it.
  // Example:
  //   pad(123, 5)
  //   > '00123'
  pad = function(num, size) {
    var j, ref, s;
    s = '';
    for (j = 0, ref = size - 1; (0 <= ref ? j <= ref : j >= ref); 0 <= ref ? j++ : j--) {
      s += '0';
    }
    s += num;
    return s.substr(s.length - size);
  };

  // Parse the query string into an object
  // From http://www.joezimjs.com/javascript/3-ways-to-parse-a-query-string-in-a-url/
  parseQueryString = function(queryString) {
    var i, l, params, queries, temp;
    params = {};
    // Split into key/value pairs
    if ((queryString != null) && !_.isEmpty(queryString)) {
      queries = queryString.split("&");
    } else {
      queries = [];
    }
    // Convert the array of strings into an object
    i = 0;
    l = queries.length;
    while (i < l) {
      temp = queries[i].split('=');
      params[temp[0]] = temp[1];
      i++;
    }
    return params;
  };

  makeSearchRegexp = function(term) {
    var terms;
    terms = term.split(" ");
    terms = _.filter(terms, function(t) {
      return !_.isEmpty(t.trim());
    });
    terms = _.map(terms, function(t) {
      return `.*${t}.*`;
    });
    terms = terms.join('|');
    return new RegExp(terms, "i");
  };

  // Get the parameters from the hash in the URL
  // Adapted from: http://stackoverflow.com/questions/4197591/parsing-url-hash-fragment-identifier-with-javascript#answer-4198132
  getHashParams = function() {
    var a, d, e, hashParams, q, r;
    hashParams = {};
    a = /\+/g; // Regex for replacing addition symbol with a space
    r = /([^&;=]+)=?([^&;]*)/g;
    d = function(s) {
      return decodeURIComponent(s.replace(a, " "));
    };
    q = window.location.hash.substring(1);
    while (e = r.exec(q)) {
      hashParams[d(e[1])] = d(e[2]);
    }
    return hashParams;
  };

}).call(this);
