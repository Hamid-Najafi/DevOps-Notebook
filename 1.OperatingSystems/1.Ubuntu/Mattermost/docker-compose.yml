networks:
  mattermost-network:
    external: true
  traefik-network:
    external: true

volumes:
  mattermost-config:
    external: true
  mattermost-data:
    external: true
  mattermost-logs:
    external: true
  mattermost-plugins:
    external: true
  mattermost-client-plugins:
    external: true
  mattermost-bleve-indexes:
    external: true
  mattermost-postgres:
    external: true

services:
  mattermost:
    image: mattermost/${MATTERMOST_IMAGE}:${MATTERMOST_IMAGE_TAG}
    container_name: mattermost
    restart: ${RESTART_POLICY}
    security_opt:
      - no-new-privileges:true
    depends_on:
      postgres:
        condition: service_healthy
    pids_limit: 200
    read_only: ${MATTERMOST_CONTAINER_READONLY}
    tmpfs:
      - /tmp
    ports:
      # https://docs.mattermost.com/configure/calls-deployment.html
      # - ${APP_PORT}:8065 Handeled via traefik
      - ${CALLS_PORT}:${CALLS_PORT}/udp
      - ${CALLS_PORT}:${CALLS_PORT}/tcp
    volumes:
      - mattermost-config:/mattermost/config:rw
      - mattermost-data:/mattermost/data:rw
      - mattermost-logs:/mattermost/logs:rw
      - mattermost-plugins:/mattermost/plugins:rw
      - mattermost-client-plugins:/mattermost/client/plugins:rw
      - mattermost-bleve-indexes:/mattermost/bleve-indexes:rw
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mattermost.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.mattermost.service=mattermost"
      - "traefik.http.routers.mattermost.entrypoints=websecure"
      - "traefik.http.services.mattermost.loadbalancer.server.port=8065"
      - "traefik.http.routers.mattermost.tls=true"
      - "traefik.http.routers.mattermost.tls.certresolver=letsencrypt"
      - "traefik.http.services.mattermost.loadbalancer.passhostheader=true"
      - "traefik.docker.network=traefik-network"
      # Redirect ALT -> MAIN
      - "traefik.http.routers.mattermost_redirect.rule=Host(`${MATTERMOST_DOMAIN_ALT}`)"
      - "traefik.http.routers.mattermost_redirect.entrypoints=websecure"
      - "traefik.http.routers.mattermost_redirect.tls=true"
      - "traefik.http.routers.mattermost_redirect.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mattermost_redirect.middlewares=mattermost_redirect_alt@docker"
      - "traefik.http.middlewares.mattermost_redirect_alt.redirectregex.regex=https://${MATTERMOST_DOMAIN_ALT}(.*)"
      - "traefik.http.middlewares.mattermost_redirect_alt.redirectregex.replacement=https://${MATTERMOST_DOMAIN}$${1}"
      - "traefik.http.middlewares.mattermost_redirect_alt.redirectregex.permanent=true"
    networks:
      - mattermost-network
      - traefik-network

  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG}
    container_name: mattermost-postgres
    restart: ${RESTART_POLICY}
    security_opt:
      - no-new-privileges:true
    pids_limit: 100
    read_only: true
    # ports:
    #   - 5432:5432
    tmpfs:
      - /tmp
      - /var/run/postgresql
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    volumes:
      - mattermost-postgres:/var/lib/postgresql/data
    environment:
      # timezone inside container
      - TZ=${TZ}
      # necessary Postgres options/variables
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - mattermost-network
      - traefik-network

# If you use rolling image tags and feel lucky watchtower can automatically pull new images and
# instantiate containers from it. https://containrrr.dev/watchtower/
# Please keep in mind watchtower will have access on the docker socket. This can be a security risk.
#
#  watchtower:
#    container_name: watchtower
#    image: containrrr/watchtower:latest
#    restart: unless-stopped
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock