networks:
  zabbix-network:
    external: true
  traefik-network:
    external: true

volumes:
  zabbix-postgres:

services:
  postgres:
    image: ${ZABBIX_POSTGRES_IMAGE_TAG}
    volumes:
      - zabbix-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${ZABBIX_DB_NAME}
      POSTGRES_USER: ${ZABBIX_DB_USER}
      POSTGRES_PASSWORD: ${ZABBIX_DB_PASSWORD}
    networks:
      - zabbix-network
    # ports:
    #   - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${ZABBIX_DB_NAME}", "-U", "${ZABBIX_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped


  zabbix-server:
    image: ${ZABBIX_SERVER_IMAGE_TAG}
    environment:
      DB_SERVER_HOST: postgres
      DB_SERVER_PORT: 5432
      POSTGRES_DB: ${ZABBIX_DB_NAME}
      POSTGRES_USER: ${ZABBIX_DB_USER}
      POSTGRES_PASSWORD: ${ZABBIX_DB_PASSWORD}
      ZBX_CACHESIZE: ${ZABBIX_CACHESIZE}
    networks:
      - zabbix-network
      - traefik-network
    healthcheck:
      test: grep -qr "zabbix_server" /proc/*/status || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Define TCP router rules for Zabbix to match all incoming requests (HostSNI)
      - "traefik.tcp.routers.zabbix-server-tcp.rule=HostSNI(`*`)"
      # Assign the Zabbix TCP router to a named Traefik service
      - "traefik.tcp.routers.zabbix-server-tcp.service=zabbix-server-tcp"
      # Use the 'zabbix-tcp' (custom) entry point
      - "traefik.tcp.routers.zabbix-server-tcp.entrypoints=zabbix-tcp"
      # Define the internal container port for routing to the Zabbix TCP service
      - "traefik.tcp.services.zabbix-server-tcp.loadbalancer.server.port=10051"
      # Assign the Zabbix UDP router to a named Traefik service
      - "traefik.udp.routers.zabbix-server-udp.service=zabbix-server-udp"
      # Use the 'zabbix-udp' (custom) entry point
      - "traefik.udp.routers.zabbix-server-udp.entrypoints=zabbix-udp"
      # Define the internal container port for routing to the Zabbix UDP service
      - "traefik.udp.services.zabbix-server-udp.loadbalancer.server.port=10051"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  zabbix-dashboard:
    image: ${ZABBIX_WEB_IMAGE_TAG}
    environment:
      DB_SERVER_HOST: postgres
      DB_SERVER_PORT: 5432
      POSTGRES_DB: ${ZABBIX_DB_NAME}
      POSTGRES_USER: ${ZABBIX_DB_USER}
      POSTGRES_PASSWORD: ${ZABBIX_DB_PASSWORD}
      ZBX_SERVER_HOST: zabbix-server
      PHP_TZ: ${ZABBIX_TIMEZONE}
    networks:
      - zabbix-network
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on a specific hostname
      - "traefik.http.routers.zabbix-dashboard.rule=Host(`${ZABBIX_DASHBOARD_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.zabbix-dashboard.service=zabbix-dashboard"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.zabbix-dashboard.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.zabbix-dashboard.loadbalancer.server.port=8080"
      # Enable TLS on this router
      - "traefik.http.routers.zabbix-dashboard.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.zabbix-dashboard.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.zabbix-dashboard.loadbalancer.passhostheader=true"
      # Apply a compression middleware
      - "traefik.http.routers.zabbix-dashboard.middlewares=compresstraefik"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      zabbix-server:
        condition: service_healthy
      traefik:
        condition: service_healthy

  zabbix-agent:
    image: ${ZABBIX_AGENT_IMAGE_TAG}
    environment:
      ZBX_HOSTNAME: Zabbix server
      ZBX_SERVER_HOST: zabbix-server
    networks:
      - zabbix-network
    restart: unless-stopped
    depends_on:
      - postgres
      - zabbix-server