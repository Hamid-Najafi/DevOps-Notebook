// Generated by CoffeeScript 2.5.1
(function() {
  var Application, RedisEvents, makeSearchRegexp;

  $(function() {
    return Application.bindTooltips();
  });

  window.Application = Application = class Application {
    static bindTooltips() {
      var defaultOptions;
      defaultOptions = {
        container: 'body',
        placement: 'top',
        template: '<div class="tooltip results-tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
      };
      return $('.tooltipped').tooltip(defaultOptions);
    }

  };

  $(function() {
    var redisEvents;
    redisEvents = new RedisEvents();
    redisEvents.bind();
    return $(".events-template").on("click", function(e) {
      redisEvents.selectTemplate($(".event-json", $(this)).text());
      // highlight the template selected
      $(this).addClass("updated");
      clearTimeout(this.selectTemplateTimeout);
      return this.selectTemplateTimeout = setTimeout(() => {
        return $(this).removeClass("updated");
      }, 300);
    });
  });

  window.RedisEvents = RedisEvents = class RedisEvents {
    constructor() {
      this.onMessageReceived = this.onMessageReceived.bind(this);
      this.onMessageError = this.onMessageError.bind(this);
      this.serverUrl = this.getServerUrlFromInput();
      this.pushPath = '/push';
      this.pullPath = '/pull';
      this.publishChannel = null;
      this.source = null;
      this.lastContentSent = null;
      this.searchTimeout = null;
    }

    bind() {
      this.bindSearch();
      // Button to send and event to the server
      $("[data-events-out-submit]").on("click", (e) => {
        var channel, content;
        content = $("[data-events-out-content]").val();
        content = JSON.parse(content); // TODO: error in case is not valid
        channel = $("[data-events-out-channel]").val().trim();
        if ((channel == null) || channel === "") {
          channel = 'to-bbb-apps';
        }
        this.lastContentSent = content;
        return this.sendEvent({
          channel: channel,
          data: content
        });
      });
      // Button to subscribe to the events from the server
      $("[data-events-server-connect]").on("click", (e) => {
        var url;
        url = this.getServerUrlFromInput();
        return this.connect(url);
      });
      return $("[data-events-out-pretty]").on("click", (e) => {
        return this.selectTemplate($("[data-events-out-content]").val());
      });
    }

    bindSearch() {
      var timeout;
      timeout = this.searchTimeout;
      return $(document).on('keyup', '[data-events-search-input]', function(e) {
        var $searchInput, search;
        $searchInput = $(this);
        search = function() {
          var searchTerm, showOrHide;
          searchTerm = $searchInput.val();
          showOrHide = function() {
            var $elem, eventText, searchRe, visible;
            $elem = $(this);
            if ((searchTerm != null) && !_.isEmpty(searchTerm.trim())) {
              visible = false;
              searchRe = makeSearchRegexp(searchTerm);
              eventText = $("[data-events-template-content]", $elem).text();
              if (eventText.match(searchRe)) {
                visible = true;
              }
            } else {
              visible = true;
            }
            if (visible) {
              $elem.show();
            } else {
              $elem.hide();
            }
            return true; // don't ever stop
          };
          return $('[data-events-template]').each(showOrHide);
        };
        clearTimeout(timeout);
        return timeout = setTimeout(function() {
          return search();
        }, 200);
      });
    }

    getServerUrlFromInput() {
      return $("[data-events-server='url']").val();
    }

    onMessageReceived(e) {
      var $icon, $message, data, pretty;
      console.log(e);
      this.setConnected(true);
      data = JSON.parse(e.data);
      if ($("[data-events-out-pretty]").is(":checked")) {
        pretty = JSON.stringify(data, null, 4);
      } else {
        pretty = JSON.stringify(data, null, 0);
      }
      if (this.excludeEvent(pretty)) {
        return;
      }
      if (JSON.stringify(data) === JSON.stringify(this.lastContentSent)) {
        this.lastContentSent = null;
        $message = $('<pre class="events-result sent">').html(pretty);
        $icon = $('<span class="glyphicon glyphicon-arrow-up tooltipped" title="sent by you">');
        $message.prepend($icon);
      } else {
        // $label = $('<span class="label label-danger">').html('sent')
        // $message.prepend($label)
        $message = $('<pre class="events-result received">').html(pretty);
      }
      // $label = $('<span class="label label-success">').html('received')
      // $message.prepend($label)
      $('#events-results').prepend($message);
      return Application.bindTooltips();
    }

    onMessageError(e) {
      console.log("EventSource failed");
      return this.setConnected(false);
    }

    excludeEvent(str) {
      var i, len, pattern, patterns, ref;
      patterns = $("[data-events-config='exclude']").val();
      ref = patterns.split('\n');
      for (i = 0, len = ref.length; i < len; i++) {
        pattern = ref[i];
        if ((str != null) && (pattern != null) && pattern.trim() !== '' && str.match(pattern)) {
          return true;
        }
      }
      return false;
    }

    connect(url) {
      try {
        this.serverUrl = url;
        this.setConnected(true);
        if (this.source != null) {
          this.source.close();
        }
        this.source = new EventSource(`${this.serverUrl}${this.pullPath}`, {
          withCredentials: false
        });
        this.source.onerror = this.onMessageError;
        return this.source.onmessage = this.onMessageReceived;
      } catch (error) {
        return this.setConnected(false);
      }
    }

    setConnected(connected) {
      if (connected) {
        $("#menu-server").removeClass("disconnected");
        return $("#menu-server").addClass("connected");
      } else {
        $("#menu-server").removeClass("connected");
        return $("#menu-server").addClass("disconnected");
      }
    }

    sendEvent(content) {
      var url;
      url = `${this.serverUrl}${this.pushPath}`;
      console.log("Sending the event", content, "to", url);
      return $.ajax({
        url: url,
        type: 'POST',
        cache: false,
        data: JSON.stringify(content),
        crossdomain: true,
        contentType: 'application/json',
        success: function(data) {
          return console.log('Sent the event successfully');
        },
        error: function(jqXHR, textStatus, err) {
          return console.log('Error sending the event:', textStatus, ', err', err);
        }
      });
    }

    selectTemplate(text) {
      var content;
      content = text;
      if ($("[data-events-out-pretty]").is(":checked")) {
        content = JSON.stringify(JSON.parse(content), null, 4);
      } else {
        content = JSON.stringify(JSON.parse(content), null, 0);
      }
      $("[data-events-out-content]").val(content);
      // highlight the elements updated
      $('[data-events-out-content]').addClass("updated");
      clearTimeout(this.selectTemplateTimeout2);
      return this.selectTemplateTimeout2 = setTimeout(() => {
        return $('[data-events-out-content]').removeClass("updated");
      }, 300);
    }

  };

  makeSearchRegexp = function(term) {
    var terms;
    terms = term.split(" ");
    terms = _.filter(terms, function(t) {
      return !_.isEmpty(t.trim());
    });
    terms = _.map(terms, function(t) {
      return `.*${t}.*`;
    });
    terms = terms.join('|');
    return new RegExp(terms, "i");
  };

}).call(this);
