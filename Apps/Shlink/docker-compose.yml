networks:
  traefik-network:
    external: true
  shlink-network:
    external: true

volumes:
  shlink-postgres:
    external: true

services:
  shlink:
    image: ${SHLINK_IMAGE_TAG}
    container_name: shlink
    hostname: ${SHLINK_HOSTNAME}
    # security_opt:
    #   - no-new-privileges:true
    # ports:
    #   - 8335:8080
    environment:
      - TIMEZONE=${SHLINK_TIMEZONE}
      - INITIAL_API_KEY=${SHLINK_INITIAL_API_KEY}
      - DB_DRIVER=${SHLINK_DB_DRIVER}
      - DB_NAME=${SHLINK_DB_NAME}
      - DB_USER=${SHLINK_DB_USER}
      - DB_PASSWORD=${SHLINK_DB_PASSWORD}
      - DB_HOST=${SHLINK_DB_HOST}
      - DB_PORT=${SHLINK_DB_PORT}
      - DEFAULT_DOMAIN=${SHLINK_HOSTNAME}
      - IS_HTTPS_ENABLED=${SHLINK_IS_HTTPS_ENABLED}
      - GEOLITE_LICENSE_KEY=${SHLINK_GEOLITE_LICENSE_KEY}
      - SHELL_VERBOSITY=${SHLINK_SHELL_VERBOSITY}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - traefik-network
      - shlink-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.shlink.rule=Host(`${SHLINK_HOSTNAME}`)"
      - "traefik.http.routers.shlink.service=shlink"
      - "traefik.http.routers.shlink.entrypoints=websecure"
      - "traefik.http.services.shlink.loadbalancer.server.port=8080"
      - "traefik.http.routers.shlink.tls=true"
      - "traefik.http.routers.shlink.tls.certresolver=letsencrypt"
      - "traefik.http.services.shlink.loadbalancer.passhostheader=true"
      - "traefik.docker.network=traefik-network"

  shlink-web:
    image: shlinkio/shlink-web-client:stable
    container_name: shlink-web
    hostname: shlink-web
    # security_opt:
    #   - no-new-privileges:true
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1
    # ports:
    #   - 8336:8080
    environment:
      - SHLINK_SERVER_NAME=${SHLINK_SERVER_NAME}
      - SHLINK_SERVER_URL=${SHLINK_SERVER_URL}
      - SHLINK_SERVER_API_KEY=${SHLINK_INITIAL_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.shlink-web.rule=Host(`${SHLINK_WEB_HOSTNAME}`)"
      - "traefik.http.routers.shlink-web.service=shlink-web"
      - "traefik.http.routers.shlink-web.entrypoints=websecure"
      - "traefik.http.services.shlink-web.loadbalancer.server.port=8080"
      - "traefik.http.routers.shlink-web.tls=true"
      - "traefik.http.routers.shlink-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.shlink-web.loadbalancer.passhostheader=true"
      - "traefik.http.routers.shlink-web.middlewares=traefik-compress"
      - "traefik.http.middlewares.traefik-compress.compress=true"
      - "traefik.http.routers.shlink-web.middlewares=authentik@docker"
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      shlink:
        condition: service_started
    networks:
      - traefik-network
      - shlink-network

  postgres:
    image: ${SHLINK_POSTGRES_IMAGE_TAG}
    container_name: ${SHLINK_DB_HOST}
    hostname: ${SHLINK_DB_HOST}
    volumes:
      - shlink-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${SHLINK_DB_NAME}
      POSTGRES_USER: ${SHLINK_DB_USER}
      POSTGRES_PASSWORD: ${SHLINK_DB_PASSWORD}
    networks:
      - shlink-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${SHLINK_DB_NAME}", "-U", "${SHLINK_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    # security_opt:
    #   - no-new-privileges:true
    # user: 1026:100