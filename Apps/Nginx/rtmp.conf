#user  nobody;

# number of CPUs Thread
worker_processes  auto;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

# RTMP configuration
rtmp {
    server {
        # listen 1935; # Listen on standard RTMP port
        listen 1936;
        chunk_size 4000;

        application stream {
            live on;
            interleave on;

            #Set this to "record off" if you don't want to save a copy of your broadcasts
            #record all;
            # The directory in which the recordings will be stored
            #record_path /var/www/html/recordings;
            #record_unique on;
            
            # HLS

            # For HLS to work please create a directory in tmpfs (/tmp/hls here)
            # for the fragments. The directory contents is served via HTTP (see
            # http{} section in config)
            #
            # Incoming stream must be in H264/AAC. For iPhones use baseline H264
            # profile (see ffmpeg example).
            # This example creates RTMP stream from movie ready for HLS:
            #
            # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
            #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
            #    -f flv rtmp://localhost:1935/hls/movie
            #
            # If you need to transcode live stream use 'exec' feature.
            #
            hls on;
            hls_path  /opt/data/hls;
            hls_fragment 10s;
            hls_playlist_length 60;

            # MPEG-DASH is similar to HLS
            dash on;
            dash_path  /opt/data/dash;
            dash_fragment 10s;

            
            # disable consuming the stream from nginx as rtmp
            #allow play all;

        }
    }
}
